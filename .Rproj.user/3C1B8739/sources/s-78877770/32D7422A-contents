## This function creats a special "matrix" oject that 
## catche & calculate the inversion of it matrix and store it 
## in the cache for ease of retrival

## Returns a list that contains 6 objects 
## setter for the matrix 
## getter for the matrix
## setter for the inverse matrix
## getter for the inverse matrix
## vector x which is the matrix it self (saved in the cache)
## vector m which is the inverse matrix itself (in the cache)

makeCacheMatrix <- function(x = matrix()) {
    m <- NULL
    set <- function(y = matrix()) {
        x <<- y
        m <<- NULL
    }
    get <- function() x
    setinv <- function(solve) m <<- solve
    getinv <- function() m
    list(set = set, get = get,
         setinv = setinv,
         getinv = getinv)
}


## This function computes the inverse of the special "matrix"
## returned by makeCacheMatrix above. Only if the inverse has 
## already been calculated and the matrix has not changed, 
## then the cachesolve should retrieve the inverse from the 
## cache and print a message indicating this retrival from cach


cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
        m <- x$getinv()
        if(!is.null(m)) {
            message("getting cached data")
            return(m)
        }
        data <- x$get()
        m <- solve(data,...)
        x$setinv(m)
        m
}
